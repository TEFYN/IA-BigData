'''
Guía Rápida: Manipulación de Datos con
NumPy

📦 1. ¿Qué es NumPy?

    ● Biblioteca central de Python para computación científica y análisis
    numérico.

    ● Su estructura principal es ndarray, capaz de manejar arrays
    multidimensionales homogéneos de forma eficiente


🧾 2. Creación de Arrays

        ● np.array(): convierte listas o tuplas en arrays.

            a1 = np.array([1,2,3])
            a2 = np.array([[1,2,3],[4,5,6]])

        ● Otros generadores:

            o np.zeros((2,3))
            o np.ones((3,3))
            o np.full((2,2), 7)
            o np.eye(3)
            o np.arange(0,10,2)
            o np.linspace(0,1,5)
            o np.random.random((3,3))


✍️ 3. Atributos de un array

        ● a = np.arange(12).reshape(3,4)

        ● a.ndim # 2

        ● a.shape # (3,4)

        ● a.size # 12

        ● a.dtype # dtype, ej. int64

        ● a.itemsize# bytes por elemento


🪓 4. Acceso y Slicing

        ● Índices múltiples:

                o a[1,2]
                o a[1][2]


        ● Subarrays:

               o a[:, :2] # todas filas, columnas 0 y 1        


📥 5. Filtrado por condición

        ● a = np.array([[1,2,3],[4,5,6]])

        ● mask = (a % 2  0)

        ● a_even = a[mask] # [2,4,6]

        ● a_cond = a[(a % 2  0)&(a>2)] # [4,6]


🔢 6. Operaciones vectorizadas
        ● a = np.array([1,2,3,6])

        ● b = np.linspace(0,2,4)

        ● c = a - b

        ● sqr = a  2

        ● Funciones Universales:

            o angles = np.linspace(-np.pi, np.pi, 100)  

            o sin, cos = np.sin(angles), np.cos(angles)


📈 7. Álgebra lineal y submódulo linalg

        ● Soporte para autovalores, transposición, pseudoinversas:

                o from numpy.linalg import inv, solve, det

                o A = np.array([[1,2],[3,4]])

                o invA = inv(A)

                o x = solve(A, np.array([5,11]))

                o d = det(A) # ad - bc = -2

                o B = np.random.rand(3,3)

                o prod = A @ B # multiplicación matricial


📍 8. Tensores y Manipulación
        ● M = np.zeros((2,3,5))

        ● T = np.transpose(M, (2,1,0))
        
        ✅ Resumen general
        Sección Funciones Principales


'''