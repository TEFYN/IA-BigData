'''Guía Rápida: Manipulación de Datos con Pandas

📦 1. ¿Qué es pandas?
● Biblioteca de Python para manipulación y análisis eficiente de datos.
● Proporciona estructuras como Series y DataFrame, basadas en
numpy, y herramientas para leer/escribir CSV, Excel o SQL.

DATA FRAME tiene FILAS x COLUMNAS
Series es UNIDIMENSIONAL

🧾 2. Estructuras principales

        2.1 Series
                ● Estructura unidimensional, homogénea y con índice.

                ● Creación:
                s = pd.Series(['A','B','C'], index=[1,2,3]) 

                o desde diccionario: pd.Series({'a':1,'b':2})

                ● Atributos clave: 
                        size,  el total de los elementos
                        dtype, el tipo de elemento
                        index. el indice

                ● Acceso: s[2], s['a'], s[[…]] según posición o etiqueta

                        s[2], accede al valor 'C' por que está en la posicion 2
                        s['a'], accede al elemento por etiqueta 'a', es decir al que tenga la etiquea 'a" o elemento 'a'
                        s[[…]] , trae multiples elementos, por ejemplo s[[1,2]], trae los elementos en las posiciones 1 y 2, 
                                puedo acceder segun posicion o etiqueta


        2.2 DataFrame

                ● Estructura bidimensional tipo tabla.

                ● Creación desde diccionarios de listas, listas de listas, CSV, etc.

                ● Atributos: .columns, .index, .dtypes.

                ● Lectura/escritura: 
                        read_csv(), 
                        to_csv(), 
                        read_excel(), etc.

                obetener el nombre de todas las columnas
                        df.columns

                        pasar todos los nombres a una lisra
                        df.columns.tolist()


                df.shape --> Dimension del dataframe(filas, columnas)"


✍️ 3. Selección y acceso a datos

        ● Por etiquetas: 

                df['col'] --> filtro osolo una columna por etiqueta
                df.loc[filas, columnas] --> filtro por etiqueta, puedo traer filas y columnas por etiqueta

                df['Edad']     # Trae la columna 'Edad'

                df.loc[:, ['Nombre', 'Edad']]  # Todas las filas, columnas seleccionadas


        ● Por posición: df.iloc[0:5, 1:3].

                filtro posicion y columna

                df.iloc[0:5, 1:3] ---> traigo las filas de la 0 a la 4 y las columnas de la 1 a la 2 ya que no incluye el ultimo

                df.loc[0, 'Edad']  # Trae el valor de la fila 0 y columna 'Edad'


        ● Filtrado condicional: df[df['edad'] > 30].

                trae la columna edad, los que sean  mayores a 30 traelos y arma u nuevo dataframe, sigue siendo el mismo dataframe a menos que lo renombres







🧼 4. Limpieza y manipulación

● Eliminar filas/columnas: drop().  ELIMINAR


● Renombrar: rename(columns={…}).

                df = df.rename(columns={
                "animal_id": "ID",
                "name": "Nombre",
                "color": "Color"
                })

● Gestionar nulos: 
        dropna() --> elimina los datos nulos
                 # Elimina filas con al menos un valor nulo


        fillna() --> reemplaza los datos nulos por algo
  
        df.fillna(0)      # Reemplaza los nulos por 0


● Convertir tipos: 
        pd.to_datetime() --> Convierte a tipo fecha

                pd.to_datetime(df['fecha'])      # Convierte columna a tipo fecha


        astype() ---> convierte a tipo de dato

                df['columna'] = df['columna'].astype(float)  # Cambia tipo manualmente

● Agregar columnas: df['nueva'] = ….

        df['doble_edad'] = df['Edad'] * 2


● Aplicar funciones: apply() a filas o columnas.

        df['Edad_cuadrado'] = df['Edad'].apply(lambda x: x**2)

        # apply() aplica una función a cada fila o columna.


🔄 5. Agrupación y agregación

        ● df.groupby('col').mean() para calcular medias por grupo.

                df.groupby('Ciudad').mean()  # Promedios por ciudad



        ● value_counts() para contar frecuencias de valores únicos. # ESTO ES UN CONTEO

                df['Sexo'].value_counts()    # Cuenta cuántas veces aparece cada valor



🔁 6. Reestructuración
        ● Formatos largo/ancho: 
                pivot() ---> transforma filas en columnas.
                
                        df.pivot(index='ID', columns='variable', values='valor')

                melt() --> transforma columnas en filas (opuesto a pivot).

                        df.melt(id_vars=['ID'], var_name='variable', value_name='valor')


        ● Permiten reorganizar datos según necesidad



🔗 7. Combinación de DataFrames
        ● Concatenación: 

                pd.concat([df1, df2])

        ● Merge/join: 
                
                pd.merge(df1, df2, on='clave')
                
                pd.merge(df1, df2, on='id')


🧠 8. Integración con NumPy y series temporales

        ● Usa numpy para operaciones vectorizadas dentro de pandas.

                import numpy as np
                df['log'] = np.log(df['Ventas'])

        ● Manejo de fechas y tiempo: to_datetime, date_range, indexación
        temporal .

                Manejo de fechas:

                        pd.to_datetime(df['fecha'])
                        pd.date_range(start='2023-01-01', periods=10, freq='D')  # 10 días

                Indexación temporal:

                        df = df.set_index('fecha')
                        df.loc['2023-01']  # Filtra por mes

📊 9. Visualización rápida
        ● Métodos como 
        
                df.plot(kind='hist') # Histograma
                df.plot.bar() # Barras
                df.plot.box() # Diagrama de caja
                pd.crosstab(df['A'], df['B']).plot(kind='bar') # Tabla de contingencia


        Estas funciones usan matplotlib internamente y permiten ver gráficos sin salir de pandas.    

        ● Genera visualizaciones simples directamente desde DataFrames .


        ✅ Resumen general

        pandas te da herramientas para:

                deifnir ciertas librerias
                definir ciertas variables globales
                definir funciones:

                Leer y escribir datos

                Seleccionar, filtrar, agrupar y transformar

                Limpiar datos

                Visualizar rápidamente
'''